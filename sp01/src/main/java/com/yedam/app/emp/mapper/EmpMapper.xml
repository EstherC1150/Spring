<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.yedam.app.emp.mapper.EmpMapper">
	<!-- 전체조회 -->
	<select id="selectEmpList" resultType="EmpVO">
		SELECT employee_id
				, last_name
				, email
				, hire_date
				, job_id
				, salary
		FROM employees
		ORDER BY employee_id
	</select>
	
	<!-- 단건조회 -->
	<select id="selectEmpInfo" resultType="EmpVO">
		SELECT employee_id
				, last_name
				, email
				, hire_date
				, job_id
				, salary
		FROM employees
		WHERE employee_id = #{employeeId}
		<!-- #안에 쓰는거 매개변수로 넘어오는 객체의 필드명을 들고온다 -->
		
		<!-- #과 $의 차이 -->
		<!-- column LIKE '%' || #{field} || '%' -->
		<!-- column LIKE '%${field}%' -->
	</select>
	
	<!-- 등록 -->
	<insert id="insertEmpInfo" parameterType="EmpVO">
		<!-- selectkey 한 컬럼, 값도 하나 , 단일값 그리고 그 값은 파라미터 타입에 담긴다 -->
		<!-- select 안에 selectkey는 select태그로도 만들 수 있다. insert랑 같이 동작하는 문이라서(관리하기 편하니까) 하위 태그 즉 내부에 집어넣은것 -->
		<selectKey keyProperty="employeeId" resultType="int" order="BEFORE">
			SELECT NVL(MAX(employee_id), 0) + 1
			FROM employees
		</selectKey>
		INSERT INTO employees
				(
					employee_id
					, last_name
					, email
					, hire_date
					, job_id
					, salary
				)
				VALUES
				(
					#{employeeId}
					,#{lastName}
					,#{email}
					,#{hireDate}
					,#{jobId}
					,#{salary}
				)
	</insert>
	
	<!-- 수정: 전제조건, 전체데이터 전송 -->
	<update id="updateEmpInfo" parameterType="EmpVO">
		UPDATE employees
			SET 
				last_name = #{lastName},
				email = #{email},
				salary = #{salary}
		WHERE employee_id = #{employeeId}
	</update>
	
	<!-- 삭제 -->
	<delete id="deleteEmpInfo" parameterType="int">
	<!-- 파라미터 타입이 객체 한건일 때 #{필드} / 객체가 아닐 때=단일값일 때는 이름값이 상관이 없음 -->
		DELETE FROM employees
		WHERE employee_id = #{eid}
	</delete>
	
	<!-- 수정: 변경된 데이터만 전송 -->
	<update id="updateEmpInFoDynamic" parameterType="EmpVO">
		UPDATE employees
			SET
				<!-- choose는 다중조건 -->
				<choose>
					<when test="lastName != null and !lastName.equals('')">
						last_name = #{lastName}
					</when>
					<!-- otherwise는 기타 -->
					<otherwise>
						last_name = 'Any'
					</otherwise>
				</choose>
				
				<!-- <if test="lastName != null and !lastName.equals('')"> -->
				<!-- 	last_name = #{lastName}, -->
				<!-- </if> -->
				<if test="email != null">
					, email = #{email}
				</if>
				<if test="salary >= 0">
					, salary = #{salary}
				</if>
			<!-- where절이 문자로 존재하는게 아니라 특정 태그로 존재하면 하위에 존재하는 특정 조건에 따라 없을 수도 있음 -->
			<!-- mybatis 다이나믹 sql절을 사용하는 경우 따로따로 만들지 않아도 괜찮다... where절과 set절 똑같은 방식...으로...? -->
			<where>
				<if test="employeeId > 0">
					employee_id = #{employeeId}
				</if>
			</where>
	</update>
	
	<!-- 매개변수 두개 -->
	<!-- 파라미터 타입이 생략된다 정확히 어떤 값이.. 될지.... 몰라서... -->
	<update id="updateEmpSal">
		<!-- Param의 지정된 이름을 쓰면된다 둘다 ~.내부필드값 지정해줘야한다 객체 안에꺼... 매개변수가 두개 이상이면 필수는 아니지만 구별하기 위해서 반드시 사용해주어야 한다.-->
		UPDATE employees
			SET salary = salary * #{info.salary}
		WHERE employee_id = #{eid}
	</update>
</mapper>